//CustomerAccountProjections

fromAll()
  .when({
    $init: function () {
      return {
        customers: [],
      };
    },
    AccountCreated: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const existingCustomer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (!existingCustomer) {
          // Initialize the customer with the account details
          state.customers.push({
            customerName: event.data.CustomerName,
            accountNumber: event.data.AccountNumber,
            balance: event.data.InitialBalance || 0, // Default to 0 if InitialBalance is undefined
          });
        }
      }
    },
    AmountCredited: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const customer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (customer) {
          // Update the balance when credited
          customer.balance = event.data.NewBalance || customer.balance; // Use NewBalance from the event
        }
      }
    },
    AmountDebited: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const customer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (customer) {
          // Update the balance when debited
          customer.balance = event.data.NewBalance || customer.balance; // Use NewBalance from the event
        }
      }
    },
    AccountDeleted: function (state, event) {
      // Remove the customer from the customers list when the account is deleted
      state.customers = state.customers.filter(
        (c) => c.accountNumber !== event.data.AccountNumber
      );
    },
  });
