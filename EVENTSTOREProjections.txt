//CustomerAccountProjections

fromAll()
  .when({
    $init: function () {
      return {
        customers: [],
      };
    },
    AccountCreated: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const existingCustomer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (!existingCustomer) {
          // Initialize the customer with the account details
          state.customers.push({
            customerName: event.data.CustomerName,
            accountNumber: event.data.AccountNumber,
            balance: event.data.InitialBalance || 0, // Default to 0 if InitialBalance is undefined
          });
        }
      }
    },
    AmountCredited: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const customer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (customer) {
          // Update the balance when credited
          customer.balance = event.data.NewBalance || customer.balance; // Use NewBalance from the event
        }
      }
    },
    AmountDebited: function (state, event) {
      // Process streams starting with 'account-'
      if (event.streamId.startsWith("account-")) {
        const customer = state.customers.find(
          (c) => c.accountNumber === event.data.AccountNumber
        );
        if (customer) {
          // Update the balance when debited
          customer.balance = event.data.NewBalance || customer.balance; // Use NewBalance from the event
        }
      }
    },
    AccountDeleted: function (state, event) {
      // Remove the customer from the customers list when the account is deleted
      state.customers = state.customers.filter(
        (c) => c.accountNumber !== event.data.AccountNumber
      );
    },
  });


  ----------------------
  //Last5Events

  fromAll()
.when({
    $init: function() {
        return {
            events: []
        };
    },
    $any: function(state, evt) {
        // More lenient stream matching
        if (evt.streamId && 
            (evt.streamId.includes('account') || 
             evt.streamId.startsWith('account'))) {
            
            try {
                // Try parsing event data
                var parsedData = evt.data ? 
                    (typeof evt.data === 'string' ? JSON.parse(evt.data) : evt.data) 
                    : null;

                var eventDetails = {
                    streamId: evt.streamId,
                    eventType: evt.type, // Include the event type
                    timestamp: evt.created,
                    fullEventData: parsedData
                };

                // Add to events list
                state.events.push(eventDetails);

                // Keep only the last 5 events
                if (state.events.length > 5) {
                    state.events.shift();
                }
            } catch (error) {
                // Silently handle parsing errors
                return state;
            }
        }

        return state;
    }
});
